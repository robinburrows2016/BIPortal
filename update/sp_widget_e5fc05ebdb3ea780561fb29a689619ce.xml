<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($rootScope, $scope, $window, $timeout, spUtil, $sce, spModal, $uibModal) {
  /* widget controller */
  var c = this;
	$scope.data.kbText = $sce.trustAsHtml($scope.data.kbText);
	$scope.data.kbWiki = $sce.trustAsHtml($scope.data.kbWiki);	
	c.flagMessage = null;
	$rootScope.$broadcast("sp.update.breadcrumbs", $scope.data.breadCrumb);
	$rootScope.properties = $scope.data.properties;
	$rootScope.messages = $scope.data.messages;
	$rootScope.isValid = c.data.isValid;
	$rootScope.comments = $scope.data.comments;
	$rootScope.commentCount = $scope.data.commentCount;	
	$rootScope.article_sys_id = $scope.data.article_sys_id;
	$rootScope.attachments = $scope.data.attachments;
	$rootScope.attachedIncidents = $scope.data.attachedIncidents;
	$rootScope.affectedProducts = $scope.data.affectedProducts;
	$rootScope.displayAttachments = $scope.data.displayAttachments;
	$rootScope.hideFeedbackOptions = $scope.data.hideFeedbackOptions;
	$rootScope.helpfulContent = $scope.data.helpfulContent;
	$rootScope.isArticleActive = $scope.data.isArticleActive;	
	$scope.data.isSubscribed = $scope.data.isArticleSubscribed || $scope.data.isArticleSubscribedAtKB;
	$scope.data.subscribeLabel = ($scope.data.isSubscribed ? $scope.data.messages.SUBSCRIBED : $scope.data.messages.SUBSCRIBE);
	c.createIncidentURL = c.options.create_task_url || ($scope.data.properties && $scope.data.properties.createIncidentURL);
	c.createIncidentLabel = c.options.create_task_prompt || $scope.data.messages.CREATE_INCIDENT;
	c.showCreateIncident = c.data.isLoggedInUser && c.options.show_create_incident_action != 'false' && c.data.properties && c.data.properties.showKBCreateIncident && c.createIncidentURL;
	c.showFlagArticle =  c.data.properties && c.data.properties.showKBFlagArticle && c.data.properties.showRatingOptions;	
	c.showMenu = c.data.properties && (c.showFlagArticle || c.data.properties.isEditable || c.showCreateIncident);
	$rootScope.stackUrl = c.data.portalName + '?id=kb_article_view%26' +  (c.data.params.sysparm_article ? 'sysparm_article=' + c.data.params.sysparm_article : 'sys_kb_id=' + c.data.params.sys_kb_id);
	c.stackUrl = $rootScope.stackUrl;
	c.flagMessage = '';
	c.submitFlagWithoutComment = "${Please enter a comment to be able to flag the article}";
	c.submitFlagWithComment = "${Press this button to flag the article}";
	$scope.data.toggleSubscribed = ($scope.data.isSubscribed ? true : false);
	c.data.markasreadLabel = "${Mark As Read}";
	c.data.sendaslinkLabel = "${Share As Link}";	
	
	if(c.data.langList.length > 1){
		for(lng in c.data.langList){
			if(c.data.langList[lng].selected == true){
				c.selectedLanguage = c.data.langList[lng];
				break;
			}
		}
	}
	
	c.showVersions = false;
	c.toggleVersions = function(){
		c.showVersions = !c.showVersions;
		$('#kbVersionInfo').slideToggle("fast");
	};
	
	c.selectLanguage = function(ind){
		$window.location.replace(c.data.portalName + '?id=kb_article_view&sys_kb_id=' + c.data.langList[ind].sys_id);	
	};
	
	c.showActionMenu = function(){
		if(c.showMenu){
			return true;
		}
		else{
			if(c.data.properties && c.data.properties.isSubscriptionEnabled && $window.innerWidth < 992)			
				return true;
			else
				return false;
		}
	}
	
	c.handleSubscribeButtonFocus = function(){
		if($scope.data.isSubscribed){
			$scope.data.subscribeLabel = $rootScope.messages.UNSUBSCRIBE;
			$scope.data.toggleSubscribed = !$scope.data.toggleSubscribed;
		}

	};
	
	c.handleSubscribeButtonBlur = function(){
		if($scope.data.isSubscribed){
			$scope.data.subscribeLabel = $rootScope.messages.SUBSCRIBED;
			$scope.data.toggleSubscribed = !$scope.data.toggleSubscribed;
		}
	}
	c.closeUnsubscribeModal = function(){
		$("#unSubscribeModal").modal('hide');
	};
	
	c.handleSubscription = function(confirmation){
		c.data.actionName = null;
		if(!$scope.data.isArticleSubscribed){
			c.data.actionName = 'subscribe';
			c.data.articleSysId = $scope.data.article_sys_id;
		} else {
			c.data.actionName = "unsubscribe";
			c.data.articleSysId = $scope.data.article_sys_id;
		}
		c.server.get({action : c.data.actionName, article_sys_id : c.data.articleSysId}).then(function(resp){
			if(c.data.actionName == 'subscribe'){
				$scope.data.isArticleSubscribed = true;				
				$scope.data.isSubscribed = true;
				$scope.data.subscribeLabel = $rootScope.messages.SUBSCRIBED;
			}
			else{
				$scope.data.isArticleSubscribed = false;
				$scope.data.isSubscribed = false;
				$scope.data.isArticleSubscribedAtKB = false;
				$scope.data.subscribeLabel = $rootScope.messages.SUBSCRIBE;
			}
			spUtil.addInfoMessage(resp.data.responseMessage);

		});
	};
	
	c.submitFlagComments = function(){
		if(!c.data.comment){
			c.flagMessage = "${Please provide a comment to flag the article}";
			$("#flagComment").focus();
			return false;
		}
		else{
			c.server.get({action : 'saveFlagComment', article_sys_id : c.data.article_sys_id, comment : c.data.comment}).then(function(resp){
				if(resp.data.responseMessage){
					spUtil.addInfoMessage(resp.data.responseMessage);
					c.clearComment();
				}

			});
			
		}
			
	};	
	
	c.submitMarkAsRead = function(){

		c.server.get({action : 'saveMarkAsRead', article_sys_id : c.data.article_sys_id}).then(function(resp){
			if(resp.data.responseMessage){
				spUtil.addInfoMessage(resp.data.responseMessage);
				c.exitMarkAsReadModal();
				c.data.isMarkedAsRead = true;
			}

		});
			
	};	
	
	c.upVote = function(){
		c.server.get({action : 'upVote', article_sys_id : c.data.article_sys_id}).then(function(resp){
			if(resp.data.responseMessage){
				if (resp.data.responseMessage == 'SUCCESS'){
					c.data.voteCount++;
					if (c.data.voteStyle == 'novote'){
						c.data.voteStyle = 'upvote';
						c.data.totalVoteCount++;
					}
					else if (c.data.voteStyle == 'downvote'){
						c.data.voteStyle = 'novote';
						c.data.totalVoteCount--;
					}
				}
			}
		});			
	};
	
	c.downVote = function(){
		c.server.get({action : 'downVote', article_sys_id : c.data.article_sys_id}).then(function(resp){
			if(resp.data.responseMessage){
				if (resp.data.responseMessage == 'SUCCESS'){
					c.data.voteCount--;
					if (c.data.voteStyle == 'novote'){
						c.data.voteStyle = 'downvote';
						c.data.totalVoteCount++;
					}
					else if (c.data.voteStyle == 'upvote'){
						c.data.voteStyle = 'novote';
						c.data.totalVoteCount--;
					}
				}				
			}
		});			
	};	
	
	//Get user's current vote for an idea or comment (novote, upvote, or downvote)
	c.getCurrVote = function(){		
		c.server.get({action : 'currentVote', article_sys_id : c.data.article_sys_id}).then(function(resp){
			var returnVote = 'novote';
			if(resp.data.responseMessage){
				returnVote = vote.type;				
			}
			return returnVote;
		});			
	};	
		
	//Return if the current post has been upvoted by user
	c.isUpvote = function(voteStyle){
		return (voteStyle === 'upvote');
	};
		
	//Return if the current post has been downvoted by user
	c.isDownvote = function(voteStyle){
		return (voteStyle === 'downvote');
	};	
		
	//Return if the current post has no votes by user
	c.isNovote = function(arrowType, voteStyle){
		return (arrowType !== voteStyle);
	};	
	
	c.copyPermalink = function(){
			var v = document.createElement('textarea');
			v.innerHTML = document.location.href;
			v.className = "sr-only";
			document.body.appendChild(v);
			v.select();
			var result = true;
			try {
				result = document.execCommand('copy');
			}
			catch(err){
				result = false;
			}
			finally{
				document.body.removeChild(v);
			}
		if(result === true){
			spUtil.addInfoMessage(c.data.messages.PERMALINK_COPIED);
		}
		else{
			$window.prompt("${Because of a browser limitation the URL can not be placed directly in the clipboard. Please use Ctrl-C to copy the data and escape to dismiss this dialog}", document.location.href);
		}
		
	};	
			
	var modal = null;
	c.launchFlagModal = function(){
		c.clearComment();
		modal = $uibModal.open(
			{
				title : c.data.messages.FLAG_THIS_ARTICLE,
				scope : $scope,
				templateUrl : 'idea-flag-article-modal-bae'
			});
	}
	
	c.clearComment = function(){
		$scope.data.comment = '';
		c.flagMessage = '';
		if(modal){
			modal.dismiss();
		}
		
	}
	
	c.launchMarkAsReadModal = function(){
		modal = $uibModal.open(
			{
				title : c.data.messages.MARK_AS_READ,
				scope : $scope,
				templateUrl : 'idea-mark-as-read-article-modal-bae'
			});
	}
	
	c.exitMarkAsReadModal = function(){
		if(modal){
			modal.dismiss();
		}
		
	}	
}
]]></client_script>
        <controller_as>c</controller_as>
        <css>.kb-wrapper{&#13;
  padding : 25px 25px 0px 25px ;&#13;
}&#13;
.kb-language, .kb-language-block{&#13;
  display: inline-block;&#13;
}&#13;
.kb-subscribe{&#13;
  min-width : 100px;&#13;
  margin-left : 5px;&#13;
}&#13;
.kb-panel-heading{&#13;
  padding-top : 6px;&#13;
  padding-bottom : 6px;&#13;
}&#13;
.kb-permalink{&#13;
	margin-right : 15px;&#13;
  margin-top : 10px;&#13;
}&#13;
&#13;
.kb-dropdown-button{&#13;
  margin-left : 5px;&#13;
  display: inline-block; &#13;
  height:34px&#13;
}&#13;
.kb-permalink-separator{&#13;
  margin : 0px;&#13;
}&#13;
.kb-number-info{&#13;
  display : inline-block;&#13;
}&#13;
&#13;
.kb-article-content{&#13;
  overflow-x:auto;&#13;
}&#13;
&#13;
.kb-sub-icon{&#13;
  //color: $brand-primary;//#428bca;&#13;
}&#13;
.kb-language-choice{&#13;
  display : inline-block;&#13;
  width : auto;&#13;
}&#13;
.kb-title-header{&#13;
  margin-top : 0px;&#13;
  line-height : 1;&#13;
}&#13;
.kb-action-menu-padding{&#13;
  margin-top : 2px;&#13;
}&#13;
.kb-panel-title-header{&#13;
  margin-top : 6px;&#13;
  vertical-align : middle;&#13;
}&#13;
.kb-version-info{&#13;
  margin-top : -5px;&#13;
  padding-bottom : 15px;&#13;
}&#13;
&#13;
.modal-title{&#13;
  text-align: start;&#13;
}&#13;
.modal-content{&#13;
  text-align : start;&#13;
}&#13;
.kb-end-buttons{&#13;
  float:right;&#13;
}&#13;
&#13;
.kb-header-row{&#13;
  margin-left : 0px;&#13;
  margin-right : 0px;&#13;
}&#13;
&#13;
.kb-version{&#13;
  //margin-left : 15px;&#13;
  //margin-right : 15px;&#13;
}&#13;
&#13;
.kb-header-line{&#13;
    margin-top: 0px;&#13;
    margin-left: -5px;&#13;
    margin-right: -5px;&#13;
  	margin-bottom : 0px;&#13;
}&#13;
&#13;
.kb-menu-entry{&#13;
}&#13;
&#13;
.glyphicon-star:before{&#13;
    color: #ffca1f;&#13;
&#13;
}&#13;
.glyphicon-star-empty{&#13;
  color: #BDC0C4;&#13;
}&#13;
.rating-stars [role="button"] {&#13;
  cursor: text;&#13;
}&#13;
&#13;
.badge {&#13;
    display: inline-block;&#13;
    min-width: 10px;&#13;
    font-size: 12px;&#13;
    font-weight: bold;&#13;
    color: rgb(255, 255, 255);&#13;
    line-height: 1;&#13;
    vertical-align: baseline;&#13;
    white-space: nowrap;&#13;
    text-align: center;&#13;
    background-color: rgb(72, 85, 99);&#13;
    padding: 3px 7px;&#13;
    border-radius: 10px;&#13;
}&#13;
&#13;
.upvote{&#13;
	color: #4BD762;&#13;
}&#13;
&#13;
.downvote{&#13;
	color: #FF402C;&#13;
}&#13;
&#13;
.novote{&#13;
	color: #485563;&#13;
}&#13;
&#13;
.trophy-Bronze {&#13;
    color: #A77044;&#13;
}&#13;
&#13;
.trophy-Silver {&#13;
    color: #A7A7AD;&#13;
}&#13;
&#13;
.trophy-Gold {&#13;
    color: #D6AF36;&#13;
}&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>BI Idea Content</description>
        <docs/>
        <field_list>color,css</field_list>
        <has_preview>false</has_preview>
        <id>bi-idea-content</id>
        <internal>false</internal>
        <link/>
        <name>BI Portal - Idea Content</name>
        <option_schema>[{"hint":"Hide all article actions (Subscribe, Edit, Create Incident, Flag Article)","name":"hide_all_actions","default_value":"false","label":"Hide All Actions","type":"boolean"},{"hint":"Show Article Versioning Information","name":"show_version_info","default_value":"true","label":"Show Version Information","type":"boolean"},{"hint":"Show the Create Incident action","name":"show_create_incident_action","default_value":"false","label":"Show Create Incident Action","type":"boolean"},{"hint":"Label for the Create Incident action","name":"create_task_prompt","label":"Create Incident Action Label","type":"string"},{"hint":"Change the url for the create incident action to any custom task form (default url is populated based on glide.knowman.create_incident_link system property)","name":"create_task_url","label":"Create Incident Action URL","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[if(!input){
		var ideaViewModel = new global.BAEIdeaViewModel();
		populateParameters();		
	
		ideaViewModel.getInfoForSP(data.params);
		var isValidRecord = ideaViewModel.isValid;
		data.ideaExists = ideaViewModel.ideaExists;
		data.messages = {};
		
		if (isValidRecord) {
			var ideaRecord = ideaViewModel.ideaRecord;
			
			// Create idea use Record For View			
			var use = new x_baes2_busimprove.BAEIdeaAjax();
			use.ideaCreateViewUseRecord(ideaRecord.sys_id.toString());
			
			populateDataFromIdeaViewModel();
			populateMessages();
			populateCommonProperties();
			// populateBreadCrumbs();
			populateVersionInfo();
			handleViewCountIncrement();
			
			if(data.articleType === 'wiki'){
				initGlideWiki();
			}

			data.sys_created_on = "";
			if (ideaViewModel.publishedRecord) {
				published = ideaViewModel.publishedRecord.published;
				data.sys_created_on = ideaViewModel.publishedRecord.sys_created_on + "";
			}
			
			data.sys_updated_on = "";
			if (ideaViewModel.publishedRecord) {
				published = ideaViewModel.publishedRecord.published;
				data.sys_updated_on = ideaViewModel.publishedRecord.sys_updated_on + "";
			}

			var relatedContent = ideaViewModel.relatedContent || ideaViewModel.getCurrentRelatedContent();
			data.shortDesc = ideaRecord.short_description + "";
			
			
			populateFeedback();
			populateSystemProperties();
			
			
			if(data.properties.showAffectedProducts === 'true' || data.properties.showAffectedProducts === true){
				populateAffectedProducts();
			}
			
			if(data.properties.showAttachedTasks === true || data.properties.showAttachedTasks === 'true'){
				populateAttachedTasks();
			}
			
			
		}
		else{
			data.messages.INSUFFICIENT_PREVILEGES = gs.getMessage("You do not have sufficient privileges to access this idea item");
			data.messages.RECORD_NOT_FOUND = gs.getMessage("Idea record not found");			
		}

}

if(input){
	if(input.action === 'saveFlagComment'){
		var kbAjax = new global.KBAjaxSNC();
		var params = {};
		params.sysparm_id = input.article_sys_id;
		params.feedback = input.comment;
		params.sysparm_flag = "true";
		kbAjax.kbWriteCommentWithParams(params);
		data.responseMessage = gs.getMessage("Article has been flagged");
	}
	if(input.action === 'subscribe'){
		var ideaAjax = new x_baes2_busimprove.BAEIdeaAjax();
		var params = {};
		params.sysparm_id = input.article_sys_id;
		params.user_id = gs.getUserID();
		params.action = input.action;		
		params.sysparm_flag = "true";
		ideaAjax.ideaSubscriptionWithParams(params);		
		data.responseMessage = gs.getMessage("You are now subscribed to this idea. You will be notified of any new comments or activity according to your notification settings.");
	}
	if(input.action === 'unsubscribe'){
		var ideaAjax = new x_baes2_busimprove.BAEIdeaAjax();
		var params = {};
		params.sysparm_id = input.article_sys_id;
		params.user_id = gs.getUserID();
		params.action = input.action;		
		params.sysparm_flag = "true";
		ideaAjax.ideaSubscriptionWithParams(params);			
		data.responseMessage = gs.getMessage("Your subscription to this idea has been removed.");
	}
	if(input.action === 'saveMarkAsRead'){
		var kbAjax = new global.BAEKBAjaxSNC();
		var params = {};
		params.sysparm_id = input.article_sys_id;
		params.user_id = gs.getUserID();
		params.sysparm_flag = "true";
		kbAjax.kbUpdateMarkAsReadWithParams(params);
		data.responseMessage = gs.getMessage("Article has been marked as read");
	}
	if(input.action === 'upVote'){
		var ideaAjax = new x_baes2_busimprove.BAEIdeaAjax();
		var params = {};
		params.sysparm_id = input.article_sys_id;
		params.user_id = gs.getUserID();
		params.vote_style = "upvote";		
		params.sysparm_flag = "true";
		data.responseMessage = ideaAjax.ideaProcessVoteWithParams(params);
	}
	if(input.action === 'downVote'){
		var ideaAjax = new x_baes2_busimprove.BAEIdeaAjax();
		var params = {};
		params.sysparm_id = input.article_sys_id;
		params.user_id = gs.getUserID();
		params.vote_style = "downvote";		
		params.sysparm_flag = "true";
		data.responseMessage = ideaAjax.ideaProcessVoteWithParams(params);
	}	
}

function getCurrVote(articleSysId, userId){
		var ideaAjax = new x_baes2_busimprove.BAEIdeaAjax();
		var params = {};
		params.sysparm_id = articleSysId;
		params.user_id = userId;
		params.vote_style = "novote";		
		params.sysparm_flag = "true";
		return ideaAjax.ideaGetCurrVoteWithParams(params);
}

function subscribeObject(type, sysId, userId){
		var kAjax = new global.KnowledgeAjax();
		return kAjax.subscribeKbArticle(sysId, "7d8f537453003200fa9bd7b08cc5872c");
}

function unsubscribeObject(type, articleSysId, kbSysId){
		var kAjax = new global.KnowledgeAjax();
		if(type === 'Article'){
			return kAjax.unsubscribeKbArticle(articleSysId);	
		}
		else{
			return kAjax.unsubscribeKB(articleSysId, kbSysId);
		}
}

function populateMessages(){
		data.messages.ARTICLE_FLAGGED = gs.getMessage("Article has been flagged");
		data.messages.FLAG_THIS_ARTICLE = gs.getMessage("Flag this article");
		data.messages.ADD_COMMENT = gs.getMessage("Add a comment");
		data.messages.NOT_RETIRED = gs.getMessage("Article not retired");
		data.messages.NOT_PUBLISHED = gs.getMessage("Article not published");
		data.messages.NOT_SAVED = gs.getMessage("Article not saved");
		data.messages.SAVED = gs.getMessage("Article saved");
		data.messages.HOME = gs.getMessage('Home');
		data.messages.DISCARDED = gs.getMessage("Article changes discarded");
		data.messages.SUBMITTED = gs.getMessage("Your article has been submitted");
		data.messages.PREVIEW = gs.getMessage(" Preview ");
		data.messages.PREVIEW_HINT = gs.getMessage("Preview changes");
		data.messages.DELETE = gs.getMessage("Delete");
		data.messages.CONFIRM_DELETE = gs.getMessage("Confirm deletion of this article?");
		data.messages.TITLE_CANCEL = gs.getMessage("Cancel changes");
		data.messages.MESSAGE_CANCEL = gs.getMessage("Discard all changes?");
		data.messages.TITLE_RETIRE = gs.getMessage("Retire");
		data.messages.MESSAGE_RETIRE = gs.getMessage("Retire this article?");
		// Status messages for the message bar.
		data.messages.DRAFT_MSG = gs.getMessage("This idea item has been created");
		data.messages.REVIEW_MSG = gs.getMessage("This idea item has been published");
		data.messages.PUBLISHED_MSG = gs.getMessage("This idea item has been published");
		data.messages.PEND_RETIRE_MSG = gs.getMessage("This idea item has been retired");
		data.messages.RETIRED_MSG = gs.getMessage("This idea item has been retired");
		data.messages.DELETE_FAIL_MSG = gs.getMessage("This article could not be deleted");
		data.messages.TXT_PLACEHOLDER = gs.getMessage("Add content");
		data.messages.LATEST_VERSION = gs.getMessage("Latest version");
		data.messages.SUBSCRIBE = gs.getMessage("Subscribe");
		data.messages.UNSUBSCRIBE = gs.getMessage("Unsubscribe");
		data.messages.COPY_PERMALINK = gs.getMessage("Copy Permalink");
		data.messages.SUBMIT = gs.getMessage('Submit');
		data.messages.COMMENTS = gs.getMessage('Comments');
		data.messages.AFFECTED_PRODUCTS = gs.getMessage('Affected Products');
		data.messages.OUTDATED = gs.getMessage('Outdated');
		data.messages.KNOWLEDGE_BASE = gs.getMessage('Knowledge Base');
		data.messages.KNOWLEDGE = gs.getMessage('Knowledge');
		data.messages.ATTACHED_INCIDENTS = gs.getMessage("Most recent tasks");
		data.messages.THANK_YOU = gs.getMessage("Thank you");
		data.messages.NO_ATTACHMENTS = gs.getMessage("No attachments found");
		data.messages.NO_INCIDENTS = gs.getMessage("No tasks found");
		data.messages.NO_PRODUCTS = gs.getMessage("No affected products found");
		data.messages.EDIT = gs.getMessage("Edit");
		data.messages.ATTACHMENTS = gs.getMessage('Attachments');
		data.messages.HELPFUL = gs.getMessage('Helpful?');
		data.messages.CREATE_INCIDENT = gs.getMessage("Create Incident");
		data.messages.FLAG_ARTICLE = gs.getMessage("Flag Article");
		data.messages.PERMALINK_COPIED = gs.getMessage("Permalink copied successfully");
		data.messages.SUBSCRIPTION_CONFIRMATION = gs.getMessage("You are now subscribed to {0}. You will be notified of any new comments or activity according to your notification settings", data.number);
		data.messages.SUBSCRIBED = gs.getMessage("Subscribed");
		data.messages.YES = gs.getMessage("Yes");
		data.messages.NO = gs.getMessage("No");
		data.messages.UNSUBSCRIBE_CONTENT = gs.getMessage("In order to unsubsrcibe from this article, you will need to unsubscribe from the parent knowledge base: {0}. ", data.kbName);	
		data.messages.UNSUBSCRIBE_CONFIRMATION = gs.getMessage("Would you like to unsubscribe from {0}", data.kbName);	
		data.messages.CANCEL = gs.getMessage("Cancel");
		data.messages.ACTION_MENU = gs.getMessage("Action Menu. Please click for available actions on the article");
		data.messages.CLOSE = gs.getMessage("Close");
		data.messages.JUST_NOW = gs.getMessage("just now");
		data.messages.ARTICLE_RATING = gs.getMessage("Average article rating - {0} stars", data.avgRating);
	
		// Mark As Read Processing
		data.messages.MARK_AS_READ = gs.getMessage("Confirmation that you have read and discussed this article");
}

function populateParameters(){
		data.params = {};
		data.params.sysparm_article = $sp.getParameter('sysparm_article');
		data.params.sysparm_language = $sp.getParameter('sysparm_language');
		data.params.sys_idea_id = $sp.getParameter('sys_idea_id') || $sp.getParameter('sys_id');
		data.params.sysparm_no_update = $sp.getParameter('sysparm_no_update');
		data.params.sysparm_no_suggest = $sp.getParameter('sysparm_no_suggest');
		data.params.sysparm_no_info = $sp.getParameter('sysparm_no_info');	
		data.params.sysparm_no_create_incident = $sp.getParameter('sysparm_no_create_incident');
}

function populateSystemProperties(){
	data.properties = {};
	data.properties.showStarRating = getProperty("glide.knowman.show_star_rating", "show_star_rating", true, true);	
	data.properties.showRatingOptions = getProperty("glide.knowman.show_rating_options", "show_rating_options", true, true);	
	data.properties.showYesNoRatings = getProperty("glide.knowman.show_yn_rating", "show_yn_rating", true, false);	
	
	//data.properties.showFlagArticle = getProperty("glide.knowman.show_flag", "show_flag", true, false);	
	//data.properties.showFlagArticle = data.properties.showFlagArticle && !params.sysparm_no_suggest && !Record.disable_suggesting;

	data.properties.showUserComments = getProperty("glide.knowman.show_user_feedback", "show_user_feedback", 'onload');	
	data.properties.showAffectedProducts = gs.getProperty('glide.knowman.affected_products.display','true');
	data.properties.showAttachedTasks = gs.getProperty('glide.knowman.recent_tasks.display','true');
	if(data.properties.showAttachedTasks === 'true'){
		data.properties.showAttachedTasks = gs.hasRole('itil') || gs.hasRole('knowledge');
	}
	data.properties.showCreateIncident = !ideaViewModel.isInPopup && !data.params.sysparm_no_create_incident;
	//data.properties.createIncidentURL = getProperty('glide.knowman.create_incident_link', 'create_incident_link', '', false);
	data.properties.createIncidentURL = '';
	
	//data.properties.isSubscriptionEnabled = ideaViewModel.isSubscriptionEnabled;
	data.properties.isSubscriptionEnabled = true;
	data.properties.isEditable = ideaViewModel.isEditable;	
	data.properties.isEditable = ideaViewModel.isEditable;
	data.properties.showFeedBack = ideaViewModel.showKBFeedback;
	data.properties.showKBRatingOptions =	ideaViewModel.showKBRatingOptions;
	
	data.properties.showKBHelpfullRating =	ideaViewModel.showKBHelpfullRating;
	data.properties.showKBStarRating = ideaViewModel.showKBStarRating;
	
	data.properties.showKBCreateIncident =	ideaViewModel.showKBCreateIncident;// && !ideaViewModel.isInPopup && !params.sysparm_no_create_incident;
	data.properties.showKBFlagArticle = ideaViewModel.showKBFlagArticle && !data.params.sysparm_no_suggest && !ideaRecord.disable_suggesting;
	data.properties.showKBUpdateAction =	ideaViewModel.showKBUpdateAction;
	data.properties.allowVotes = 'true';
	data.properties.allowDownvotes = 'true';

}
function getProperty(propertyName, optionName, defaultValue, checkRoles){
	var optionVal = options[optionName];
	if(!optionVal || optionVal === 'use_system' || !(optionVal === 'yes' || optionVal === 'no') ){
		var propValue = gs.getProperty(propertyName, defaultValue);
		if(propValue && checkRoles){
			var roles = gs.getProperty(propertyName + '.roles');
			if (roles != null && roles != ''){
				propValue = gs.hasRole(roles);
			}	
		}
		return propValue;
	}
	else {
		return optionVal === 'yes' ? true : false;
	}
}

function populateCommonProperties(){
	data.isMobileView = ($sp.getParameter('sysparm_device') != "" && $sp.getParameter('sysparm_device') == "mobile");
	data.isKBLanguagesNewUI = GlidePluginManager.isActive('com.glideapp.knowledge.i18n2');
	data.portalName = $sp.getPortalRecord().getValue('url_suffix');
	if(!data.portalName || data.portalName === ''){
		data.portalName = gs.getProperty('sn_km_portal.glide.knowman.serviceportal.portal_url', 'kb');
	}
	data.langList = [];
	if(data.isKBLanguagesNewUI){
		data.langList = ideaViewModel.getLanguagesToDisplay(Record);
	}
}

function populateDataFromIdeaViewModel(){
			data.isValid = true;
			data.active = ideaRecord.getDisplayValue('active');	
			data.isLoggedInUser = gs.getSession().isLoggedIn();
			data.canContributeToKnowledge = ideaViewModel.canContributeToKnowledgeBase; //canContributeHelper.canContribute(ideaViewModel.Record);
			data.article_sys_id = ideaRecord.sys_id + '';	
			data.authorTitle = ideaViewModel.authorTitle || ideaViewModel.getAuthorInfo("author.title");
			data.kbText = ideaRecord.getValue('text') ;
			data.description = ideaRecord.getValue('description') ;
			data.benefits = ideaRecord.getValue('business_case') ;		
			data.avgRating = Math.round(ideaRecord.rating);
			data.number = ideaRecord.number + '';
			data.articleType = ideaRecord.article_type + '';
			data.permalink = ideaViewModel.permalink;
			data.category = ideaRecord.category;
			data.attachments = ideaViewModel.attachments;
			data.shortDesc = ideaRecord.short_description + "";
			data.voteCount = ideaRecord.getDisplayValue('vote_count');
			data.totalVoteCount = ideaRecord.getDisplayValue('total_vote_count');
			data.commentCount = ideaRecord.getDisplayValue('comment_count');	
			data.viewCount = ideaRecord.getDisplayValue('sys_view_count');
			data.voteStyle = getCurrVote(ideaRecord.sys_id.toString(), gs.getUserID()).toString();
			data.award = ideaRecord.getDisplayValue('award');
			data.confidential = ideaRecord.getDisplayValue('confidential');	
			data.displayAttachments = ideaRecord.display_attachments + '';
			data.disableSuggesting = ideaRecord.disable_suggesting;
			//data.revisionString = ideaViewModel.revisionString;
	        data.revisionString = 'Submitted by ' + ideaRecord.submitted_for;
			//data.isSubscriptionEnabled = ideaViewModel.isSubscriptionEnabled;
            data.isSubscriptionEnabled = true;
			data.campaignClassification = ideaRecord.campaign.classification.getValue();	
			data.campaignState = ideaRecord.campaign.state.getValue();
			if (data.campaignState == '0' && data.active) {
				data.isArticleActive = true;
			} else {
				data.isArticleActive = false;
			}
			data.helpfulContent = ideaViewModel.helpfulText;
			if(data.isSubscriptionEnabled === true){
				//data.isArticleSubscribed = (new global.ActivitySubscriptionContext().getSubscriptionService().isSubscribed(ideaRecord.sys_id).subscriptionId) ? true : false;ideaViewModel.isArticleSubscribed;
				//data.isArticleSubscribedAtKB = (new global.ActivitySubscriptionContext().getSubscriptionService().isSubscribed(ideaRecord.kb_knowledge_base).subscriptionId) ? true : false;
				data.isArticleSubscribed = ideaViewModel.isArticleSubscribed;
				data.isArticleSubscribedAtKB = ideaViewModel.isArticleSubscribedAtKB;				
			}
			else{
				data.isArticleSubscribed = false;
				data.isArticleSubscribedAtKB = false;				
			}

			//data.kbSysId = ideaRecord.kb_knowledge_base.sys_id + '';
	        data.kbSysId = '';
			//data.kbName = ideaRecord.kb_knowledge_base.getDisplayValue() + '';
	        data.kbName = '';
	
			// Mark As Read Processing
			//data.isMarkedAsRead = ideaViewModel.isMarkedAsRead(ideaRecord.sys_id);
	        data.isMarkedAsRead = false;
			//data.isMarkedAsRead = (ideaViewModel.isMarkedAsRead(Record.sys_id) === true);
			//data.isMarkedAsRead = false;
			//data.kbBase = ideaRecord.kb_knowledge_base.sys_id.toString();
	        data.kbBase = '';
			if (data.isArticleSubscribed && data.kbBase == 'bdedda604fd45b403625e3518110c795' ) {
				data.isMarkAsReadEnabled = true;
			} else {
				data.isMarkAsReadEnabled = false;				
			}
}

function populateBreadCrumbs(){
	var breadCrumb = ideaViewModel.getBreadcrumb();
	data.breadCrumb = [];
	//data.breadCrumb.push({label: ideaRecord.kb_knowledge_base.title + ' (' + data.messages.KNOWLEDGE_BASE + ')', url: data.portalName + '?id=kb_search&kb_knowledge_base=' + ideaRecord.kb_knowledge_base.sys_id});
	var ctg = '';
	for(var i = 0; i < breadCrumb.length; i++){
		ctg += breadCrumb[i].name;
		if(i != breadCrumb.length - 1){
			ctg += ' - ';
		}
	}
	if(ctg !== '' && breadCrumb && breadCrumb.length > 0){
		data.breadCrumb.push({label: ctg + '', url: data.portalName + '?id=kb_search&kb_knowledge_base=' + breadCrumb[breadCrumb.length - 1].knowledge_base + '&kb_category=' + breadCrumb[breadCrumb.length - 1].value });
	}
}

function handleViewCountIncrement(){
	ideaRecord.incrementViewCount();
	var viewCountGR = new GlideRecord('x_baes2_busimprove_ideas');
	if(viewCountGR.get(ideaRecord.sys_id))
		data.viewCount = viewCountGR.getValue('sys_view_count');

}

function initGlideWiki(){
	try{
		data.kbWiki = ideaViewModel.getWikiContent();		
	}
	catch(e){
		data.kbWiki = '';
	}
}

function populateAttachedTasks(){
	data.attachedIncidents = [];	
	data.attachedIncidents = ideaViewModel.getAttachedTasks();
}

function populateAffectedProducts(){
	data.affectedProducts = [];
	data.affectedProducts = ideaViewModel.getAffectedProducts();
}

function populateVersionInfo(){
	data.isVersioningEnabled = ideaViewModel.versioningInfo.isEnabled;
	data.versionList = ideaViewModel.versioningInfo.history;
	data.version = ideaRecord.getDisplayValue('version');
	data.isLatestVersion = !(ideaViewModel.versioningInfo.newVersionAvailable === true); 
	//data.workflowState = (ideaRecord.workflow_state != 'published') ? ('(' + ideaRecord.workflow_state.getDisplayValue() + ')') : ''; 
	data.workflowState = 1;
	data.versionInfo = ideaViewModel.versioningInfo.versionDisplay;//((ideaViewModel.versioningInfo.newVersionAvailable === true) ? 'v' + data.version  : data.messages.LATEST_VERSION);
	data.showHistory = ideaViewModel.versioningInfo.showHistory;
	data.hideFeedbackOptions = ideaViewModel.hideFeedbackOptions;
	data.versionWarningMessage = ideaViewModel.versioningInfo.warningMessage;
	if(data.versionWarningMessage){
		data.versionWarningMessage = data.versionWarningMessage.replace('kb_view.do?', data.portalName + '?id=kb_article_view&');
	}
}
function populateFeedback(){
	var feedbackRecords = ideaViewModel.feedbackRecord;
	data.comments = [];
	while(ideaViewModel.feedbackRecord.next()){
		var user = ideaViewModel.feedbackRecord.user.getDisplayValue();
		var userID = ideaViewModel.feedbackRecord.user.getValue();		
		var createdTime = ideaViewModel.feedbackRecord.getValue('sys_created_on');
		var comment = ideaViewModel.getFeedbackComment(ideaViewModel.feedbackRecord);
		var useful = ideaViewModel.feedbackRecord.useful.getDisplayValue();
		var resolved = ideaViewModel.feedbackRecord.resolved.getDisplayValue();
		var flagged = ideaViewModel.feedbackRecord.flagged.getDisplayValue();		
		var sys_id = ideaViewModel.feedbackRecord.sys_id.getValue();		
		data.comments.push({'userName' : user, 'userID' : userID, 'createdOn' : createdTime, 'commentText' : comment, 'usefulFlag' : useful, 'resolvedFlag' : resolved, 'flagged' : flagged, 'sys_id' : sys_id});
	}
}
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>robin.burrows@baesystems.com</sys_created_by>
        <sys_created_on>2019-01-10 14:03:48</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e5fc05ebdb3ea780561fb29a689619ce</sys_id>
        <sys_mod_count>190</sys_mod_count>
        <sys_name>BI Portal - Idea Content</sys_name>
        <sys_package display_value="Business Improvement Portal" source="x_baes2_busimprove">cecbd46adb3a2780561fb29a6896192f</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Business Improvement Portal">cecbd46adb3a2780561fb29a6896192f</sys_scope>
        <sys_update_name>sp_widget_e5fc05ebdb3ea780561fb29a689619ce</sys_update_name>
        <sys_updated_by>robin.burrows@baesystems.com</sys_updated_by>
        <sys_updated_on>2019-03-28 08:36:25</sys_updated_on>
        <template><![CDATA[<div ng-if="data.versionWarningMessage && c.options.show_version_info != 'false'" class="alert alert-info alert-dismissible" role="alert">
  <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
  <div ng-bind-html="data.versionWarningMessage">
  </div>
</div>

<div ng-if="::data.isValid" class="panel panel-default">
  <div class="panel-heading kb-panel-heading">
    <span class="panel-title">
      <div class="row">
        <span class="col-md-5 kb-panel-title-header">
          <div class="kb-number-info">
            <span>{{data.number}}</span> 
            <span ng-if="data.showHistory && c.options.show_version_info != 'false'"> - <a ng-click="c.toggleVersions()" href="javascript:void(4)"> {{data.versionInfo}}</a> 
              <span ng-if="data.workflowState">{{data.workflowState}}</span>
            </span>
          </div>
        </span>
        <div ng-if="!$root.hideFeedbackOptions && c.options.hide_all_actions != 'true'" class="col-md-7 kb-end-buttons">
				
          
          <div class="dropdown kb-end-buttons">           
            <span class="hidden-sm hidden-xs">
              <a tabindex="0" ng-if="data.isMarkAsReadEnabled && data.isMarkedAsRead == 'false'" 
                 role="button"
                 class="btn btn-primary kb-markasread" ng-click="c.launchMarkAsReadModal()" href="javascript:void(5)">
                <span  class="kb-sub-icon" aria-label="{{data.markasreadLabel}}">
                  {{data.markasreadLabel}}
                </span>
              </a>
            </span>
            <span ng-if="data.campaignClassification == '1'" class="hidden-sm hidden-xs">
              <a tabindex="0"
                 id="sendlinkButton"
                 role="button"
                 class="btn btn-primary kb-sendaslink" 
                 data-toggle="modal"
                 data-target="#sendlinkModal">
                <span  class="kb-sub-icon" aria-label="{{data.sendaslinkLabel}}">
                  {{data.sendaslinkLabel}}
                </span>
              </a>
            </span>            
            <span class="hidden-sm hidden-xs">
              <a tabindex="0" ng-mouseover="c.handleSubscribeButtonFocus()" 
                 ng-if="data.properties.isSubscriptionEnabled && !data.isMarkAsReadEnabled" 
                 ng-mouseleave="c.handleSubscribeButtonBlur()"
                 ng-focus="c.handleSubscribeButtonFocus()"
                 ng-blur="c.handleSubscribeButtonBlur()"
                 role="button"
                 ng-class="{'btn-primary': data.isArticleSubscribed == true, 'btn-default': data.isArticleSubscribed == false}"
                 class="btn kb-subscribe" ng-click="data.isArticleActive && c.handleSubscription()" href="javascript:void(5)">
                <span  class="kb-sub-icon" aria-label="{{data.subscribeLabel}}">
                  {{data.subscribeLabel}}
                </span>
              </a>
            </span>            
            <button ng-if="c.showActionMenu()" class="btn btn-default dropdown-toggle kb-dropdown-button hidden" type="button" data-toggle="dropdown" aria-label="{{data.messages.ACTION_MENU}}">
							<span class="glyphicon glyphicon-option-horizontal kb-action-menu-padding"></span>
           	</button>
            <ul id="kbActionMenuList" class="dropdown-menu dropdown-menu-right">
              <li class="kb-menu-entry hidden-md hidden-lg visible-sm visible-xs" ng-if="data.properties.isSubscriptionEnabled">
              <a ng-mouseover="c.handleSubscribeButtonFocus()" 
               ng-if="data.properties.isSubscriptionEnabled && c.options.hide_subscription != 'true'" 
               ng-mouseleave="c.handleSubscribeButtonBlur()"
               ng-focus="c.handleSubscribeButtonFocus()"
               ng-blur="c.handleSubscribeButtonBlur()"
               href="javascript:void(6)"  
               ng-click="c.handleSubscription()">
              <span  class="kb-sub-icon" aria-label="{{data.subscribeLabel}}">
              	{{data.subscribeLabel}}
              </span>
            </a>
              </li>
              <li class="kb-menu-entry hidden" ng-if="c.showFlagArticle"><a href="javascript:void(1)" data-toggle="modal" ng-click="c.launchFlagModal()">{{data.messages.FLAG_ARTICLE}}</a></li>
              <li class="kb-menu-entry" ng-if="c.showCreateIncident"><a target="_blank" href="{{c.createIncidentURL}}">{{c.createIncidentLabel}}</a></li>
              <li class="kb-menu-entry" ng-if="data.properties.isEditable" ><a target="_blank" href="kb_knowledge.do?sys_id={{data.article_sys_id}}&sysparm_stack={{c.stackUrl}}">{{data.messages.EDIT}}</a></li>
            </ul>
          </div>
					<!-- Flag article modal -->

        </div>
        
      </div>
    </span>

  </div>

  <div class="panel-body kb-wrapper">
	  <div id="kbVersionInfo" class="kb-version-info" style="display:none" ng-if="data.showHistory && c.options.hide_version_info != 'true'" class="kb-version-info">
    	<div class="kb-version" ng-repeat="version in data.versionList">
      <span ng-if="!version.isCurrent"><a  href="?id=kb_article_view&sys_kb_id={{version.sysId}}">{{version.versionNumber}}</a> - {{version.versionText}}</span>
      <span ng-if="version.isCurrent"><b>{{version.versionNumber}} - {{version.versionText}}</b></span>
    </div>    

    
  </div>
  <div class="row">    
    <div ng-class="{'col-xs-11':data.properties.allowVotes == 'true', 'col-xs-12':data.properties.allowVotes == 'false'}">      
      <h2 class="widget-header kb-title-header">
        <i ng-if="data.award" class="fa fa-trophy pad-right trophy-{{::data.award}}" />                                         
        {{::data.shortDesc}}
      </h2>
      <p>
        <div class="kb-language-block pad-right text-nowrap" ng-if="data.langList.length > 1" ng-cloak>
          <div class="kb-language">
            <div class="dropdown">
              <a href="javascript:void(0);" class="dropdown-toggle" aria-label="${Click to view the article in other available languages}" aria-haspopup="true" data-toggle="dropdown">
                <span class="lang-icon"><i class="fa fa-globe" aria-hidden="true"></i></span>
                <span class="lang-data hidden-xs">${{{c.selectedLanguage.label}}}</span>
              </a>
             <ul class="dropdown-menu dd-right-menu" role="menu">
               <li ng-repeat="item in data.langList" role="menuitem"><a title="${{{item.label}}}" role="button" ng-click="c.selectLanguage($index)" href="javascript:void(0);">${{{item.label}}}</a></li>
            </ul>
            </div>
          </div>
           </div>
         <span ng-if="data.revisionString && data.confidential == 'false'" class="author pad-right text-nowrap">
          <span ng-if="data.langList.length > 1" class="pad-right">&#8226;</span>
          <i class="fa fa-user pad-right" />
           {{data.revisionString}}
        </span>
        <span class="published pad-right text-nowrap">
          <span ng-if="data.revisionString && data.confidential == 'false'" class="pad-right">&#8226;</span> <i class="fa fa-calendar pad-right" />
          <sn-time-ago timestamp="data.sys_created_on"/>
        </span>
        <span ng-if="data.viewCount == 1" class="views pad-right text-nowrap">
          <span class="pad-right">&#8226;</span> <i class="fa fa-eye pad-right" />
          ${{{::data.viewCount}} View}
        </span>
        <span ng-if="data.viewCount > 1" class="views pad-right text-nowrap">
          <span class="pad-right">&#8226;</span> <i class="fa fa-eye pad-right" />
          ${{{::data.viewCount}} Views}
        </span>
      	<span ng-if="data.totalVoteCount == 1" class="views pad-right text-nowrap">
          <span class="pad-right">&#8226;</span> <i class="fa fa-signal pad-right" />
          ${{{::data.totalVoteCount}} Vote}
        </span>
        <span ng-if="data.totalVoteCount > 1" class="views pad-right text-nowrap">
          <span class="pad-right">&#8226;</span> <i class="fa fa-signal pad-right" />
          ${{{::data.totalVoteCount}} Votes}
        </span>
      	<span ng-if="$root.commentCount == 1" class="views pad-right text-nowrap">
          <span class="pad-right">&#8226;</span> <i class="fa fa-comments pad-right" />
          ${{{$root.commentCount}} Comment}
        </span>
        <span ng-if="$root.commentCount > 1" class="views pad-right text-nowrap">
          <span class="pad-right">&#8226;</span> <i class="fa fa-comments pad-right" />
          ${{{$root.commentCount}} Comments}
        </span>      
        <span class="text-nowrap" ng-if="data.properties.showKBStarRating && data.properties.showKBRatingOptions && data.avgRating >= 0" title="{{::data.avgRating}} rating">
          <span class="pad-right">&#8226;</span> <uib-rating ng-model="::data.avgRating" max="5" aria-label="{{::data.messages.ARTICLE_RATING}}"readonly="true"/>
        </span>
      </p>    
    </div>
    <div ng-show="data.properties.allowVotes == 'true'" class="col-xs-1" style="text-align: center">
      <div>
        <div class="row">
          <div ng-click="data.isArticleActive && c.upVote();">
            <a ng-class="{'glyphicon glyphicon-chevron-up':true, 'upvote':c.isUpvote(data.voteStyle), 'novote':c.isNovote('upvote',data.voteStyle)}" style="font-size: 18px; margin-left: 2px;"></a>
          </div>
        </div>
        <div class="row" style="margin-bottom: 3px;">
          <div class="badge">
            <div style="font-size:16px">{{data.voteCount}}</div>
          </div>
        </div>
        <div class="row">
          <div ng-show="data.properties.allowDownvotes == 'true'" ng-click="data.isArticleActive && c.downVote();">
            <a ng-class="{'glyphicon glyphicon-chevron-down':true, 'downvote':c.isDownvote(data.voteStyle), 'novote':c.isNovote('downvote', data.voteStyle)}" style="font-size: 18px; margin-right: 1px;"></a>
          </div>
        </div>
      </div>
    </div>    
  </div>

  <div class="row">
    <hr class="kb-header-line"/>
	<div class="kb-article-content" ng-if="::data.description">
      <h3>Description</h3>
      <div>{{data.description}}</div>
    </div>
  </div>

  <div class="row">  
	<div class="kb-article-content" ng-if="::data.benefits">
      <h3>Benefits</h3>
      <div>{{data.benefits}}</div>
    </div>
  </div>    
 
    <div class="kb-article-content" ng-if="::data.articleType == 'wiki'" ng-bind-html="::data.kbWiki"></div>
	<hr class="kb-permalink-separator hidden"/>
	<p class="pull-right kb-permalink"><a class="hidden" href="javascript:void(2)" ng-click="c.copyPermalink()">{{::data.messages.COPY_PERMALINK}}</a></p>  
  </div>
</div>

<div ng-if="!data.isValid && !data.knowledgeExists" class="col-sm-12 panel-warning">
  <div class="panel-heading">{{data.messages.RECORD_NOT_FOUND}}</div>
</div>

<div ng-if="!data.isValid && data.knowledgeExists" class="col-sm-12 panel-warning">
  <div class="panel-heading">{{data.messages.INSUFFICIENT_PREVILEGES}}</div>
</div>

<!-- Include Feedback Mechanism -->
<widget id="simplesendlink" options='{"dataTable": "x_baes2_busimprove_ideas", "dataRecord": data.article_sys_id, "event": "send.email.link", "hdrTitle": "Share A Link To This Idea", "autoHideTY": "true", "autoHideDuration": "2.00"}'></widget>

<style>
  #uiNotificationContainer{
  top : 10px;
}
@media only screen and (max-width :992px){
  .kb-wrapper{
    padding : 10px !important;
  }
  .kb-menu-entry{
    padding-top: 2px;
    padding-bottom: 2px;
  }
  .kb-version-info{
 		margin-top : 5px !important;
	}
  .kb-number-info{
    margin-top : 6px !important;
  }

}
  
</style>
]]></template>
    </sp_widget>
</record_update>
